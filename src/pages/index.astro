---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
---

<Layout title="Welcome to Astro.">
	<main>
		<div class="container">
			<header>
			  <div class="brand">
				<h1 class="text-color">
					STAR REALMS HP COUNTER
				</h1>
			  </div>
			  <div class="nav">
				<a href="#" data-tooltip="Reset Score" class="tooltip">
				  <button class="nav-btn" id="reset">
					<span>
					  <i class="material-icons text-color">replay</i>
					 </span>
				  </button>
				</a>
				<a href="#settings" data-tooltip="Settings" class="tooltip">
				  <button>
					<span>
					  <i class="material-icons text-color">settings</i>
					</span>
				  </button>
				</a>
			  </div>
			</header>
			<div class="health-container">
			  <div class="player-container">
			   <button id="add">
				 <span>+</span>
			   </button>
			   <div class="health-text text-color" id="health"> 20 </div>
			   <button id="sub">
				 <span>-</span>
			   </button>
			 </div>
			</div>
			<!-- Settings -->
			<div id="settings" class="modal-dialog">
			  <div>
				<div class="modal-header">
				  <h2>Settings</h2>
				</div>
				<div class="modal-body">
				  <form>
					<label for="hp">Starting Hit Points</label>
					<input type="text" id="hp" class="text-field" name="start-hp" value="">
				  </form>
				</div>
				<div class="modal-footer">
				  <a href="#modal-close">
					<button class="modal-button">
					   Cancel
					</button>
				  </a>
				  <a href="#modal-close">
					<button class="modal-button" id="update">
					   Update
					</button>
				  </a>
				</div>
			  </div>
			</div>
		   <!-- Settings End -->
		  </div>
		   <!--This is the end --> 
	</main>
</Layout>
<script>

//Counter 
var myHealth = 20; 
var defaultHealth = 50; // Starting health 
//Starting state ranges
var goodHealth = myHealth *.75;
var critHealth = myHealth *.25;

//HP State Colors
var goodLightColor = "#8BC34A";
var goodLightColorRgb = {r: 139, g:  195, b:  74};

var goodDarkColor = "#689F38";
var goodDarkColorRgb = {r: 104, g:  159, b:  56};

var midLightColor = "#FFC107"
var midLightColorRgb = {r: 255, g:  193, b:  7};

var midDarkColor = "#FF8f00"
var midDarkColorRgb = {r: 255, g:  143, b:  0};

var criticalLightColor = "#F44336";
var criticalLightColorRgb = {r: 244, g:  67, b: 54};

var criticalDarkColor = "#C62828";
var criticalDarkColorRgb = {r: 198, g:  40, b:  40};

var animDuration = 1500;

//Set state ranges
stateRanges();
function stateRanges(){
  goodHealth = myHealth *.75;
  critHealth = myHealth *.25;
};

const healthEl = document.getElementById("health")
const subEl = document.getElementById("sub")
const addEl = document.getElementById("add")
const resetEl = document.getElementById("reset")
const startHealthEl = document.getElementById("startHealth")
const bodyEl = document.querySelector('body'); // your element
const textEls = document.querySelectorAll('.text-color')
const buttonEl = document.querySelector(".player-container button")

const bgProperty = 'background-color';       // fading property

const extractRgb = (el) => {
	var bodyBackgroundColor = getComputedStyle(document.body).backgroundColor;

	// Extract RGB values
	var rgbValues = bodyBackgroundColor.match(/\d+/g);

	// Print the RGB values in the specified format
	if (rgbValues) {
		var r = rgbValues[0];
		var g = rgbValues[1];
		var b = rgbValues[2];
		console.log('{' + r + ', ' + g + ', ' + b + '}');
		return {r, g, b}
	}
}

const updateHealth = () => {
	healthEl.innerHTML = myHealth.toString(); //update HP
}

//Listen for sub button
subEl.addEventListener("click", function(e){
    myHealth--; //subtract 1 to myHealth
	updateHealth()
    healthStateCheck();
})

//Listen for add button
addEl.addEventListener("click",function(e){
    myHealth++; //Add 1 to my health
    updateHealth()
    healthStateCheck();
});

//Listen for reset button
resetEl.addEventListener("click", resetHealth);

function resetHealth(){
     myHealth = parseInt(startHealthEl.innerText) || defaultHealth;
     updateHealth()
     stateRanges();
     healthStateCheck(); 
};

//Health State

const lerp = function(a, b, u) {
    return (1 - u) * a + u * b;
};

const fade = function(element, property, end, duration) {
    var interval = 10;
    var steps = duration / interval;
    var step_u = 1.0 / steps;
    var u = 0.0;
	const start = extractRgb(element)

    var theInterval = setInterval(function() {
        if (u >= 1.0) {
            clearInterval(theInterval);
        }
        var r = Math.round(lerp(start.r, end.r, u));
        var g = Math.round(lerp(start.g, end.g, u));
        var b = Math.round(lerp(start.b, end.b, u));
        var colorname = 'rgb(' + r + ',' + g + ',' + b + ')';
        element.style.setProperty(property, colorname);
        u += step_u;
    }, interval);
};

extractRgb(bodyEl)



function healthStateCheck(){
  if(myHealth >= goodHealth){
	fade(bodyEl,bgProperty,goodLightColorRgb,animDuration);
	textEls.forEach(el => fade(el,bgProperty,goodDarkColorRgb,animDuration))
	fade(buttonEl,bgProperty,goodDarkColorRgb,animDuration);
  } else if(myHealth < goodHealth && myHealth > critHealth){
	fade(bodyEl,bgProperty,midLightColorRgb,animDuration);
	textEls.forEach(el => fade(el,bgProperty,midDarkColorRgb,animDuration))
	fade(buttonEl,bgProperty,midDarkColorRgb,animDuration);
  } else {
	fade(bodyEl,bgProperty,criticalLightColorRgb,animDuration);
	textEls.forEach(el => fade(el,bgProperty,criticalDarkColorRgb,animDuration))
	fade(buttonEl,bgProperty,criticalDarkColorRgb,animDuration);
  }
}

// function healthStateCheck(){
//   if(myHealth >= goodHealth){
//     jQuery('body').animate({backgroundColor:goodLightColor}, animSpeed);
//     jQuery('.text-color').animate({color:goodDarkColor}, animSpeed);
//     jQuery('.player-container button').animate({backgroundColor:goodDarkColor}, animSpeed);
//   } else if(myHealth < goodHealth && myHealth > critHealth){
//     jQuery('body').animate({backgroundColor:midLightColor}, animSpeed);
//     jQuery('.text-color').animate({color:midDarkColor}, animSpeed);
//     jQuery('.player-container button').animate({backgroundColor:midDarkColor}, animSpeed);
//   } else {
//     jQuery('body').animate({backgroundColor:criticalLightColor}, animSpeed);
//     jQuery('.text-color').animate({color:criticalDarkColor}, animSpeed);
//     jQuery('.player-container button').animate({backgroundColor:criticalDarkColor}, animSpeed);
//   } 
// }

//Form

// jQuery(document).ready(function(){
//     $("#hp").numeric();
// });


// jQuery("#hp").val(defaultHealth); //Sets the init val of starting health

// jQuery("#update").click(function(e){
//   console.log(jQuery("#hp").val());
//   defaultHealth = jQuery("#hp").val();
//   resetHealth();
// });

// //Credit to: https://codepen.io/madshaakansson/pen/ykode
// var element, circle, d, x, y;

// jQuery("button span").click(function(e){
  
// 	element = jQuery(this);
  
// 	if(element.find(".circle").length == 0)
// 		element.prepend("<span class='circle'></span>");
		
// 	circle = element.find(".circle");
// 	circle.removeClass("animate");
	
// 	if(!circle.height() && !circle.width())
//   {
// 		d = Math.max(element.outerWidth(), element.outerHeight());
// 		circle.css({height: d, width: d});
// 	} 
	
// 	x = e.pageX - element.offset().left - circle.width()/2;
// 	y = e.pageY - element.offset().top - circle.height()/2;
	
// 	circle.css({top: y+'px', left: x+'px'}).addClass("animate");
// });
</script>
<style>
	@import url(https://fonts.googleapis.com/css?family=Roboto:300,400,500);

@keyframes effect {
  100%{
    opacity:0;
    transform:scale(2.5);
  }
}

*, *:before, *:after{
  box-sizing: border-box;
  margin: 0; 
  padding: 0;
}


body {
  background:#8BC34A;
  width: 100%;
  font-family: 'Roboto', Arial, serif;
  font-weight:400;
  font-size:14px;
}

h1 { 
  font-weight: 300; 
  margin: 0;
  font-size:2.2em;
}

h2{
  font-weight: 400;
}

button{
  outline:none;
  overflow:hidden;
  border: none;
} 

button:focus {
  outline:none;
}

button:hover {
  cursor: pointer;
}

button span{
  display: block;
  user-select: none;
  position: relative;

}

a:link {
  text-decoration:none;
}

a.tooltip{
  position:relative;
}

a.tooltip::before {
    content: attr(data-tooltip);   
    position:absolute;
    top: 25px;
    left: -30px;
    z-index: 999;
    white-space:nowrap;
    background:rgba(0,0,0,0.25);
    color:#fff;
    padding:0px 7px;
    line-height: 24px;
    height: 24px;
    font-weight:400;
    font-size:12px;
     
    opacity: 0;  
    transition:opacity 0.5s ease-out; 
    }
     
a.tooltip:hover::before {
    opacity: 1;
}

input {
  margin-top:10px;
  width:100%;
  font-family: 'Roboto', Arial, serif;
  font-size: 17px;
  font-weight:400;
  color: #9A9A9A;
  line-height:28px;
  border: none;
  border-bottom: 1px solid;
  border-color:  #9A9A9A;
}

input:focus {
  border-bottom: 2px solid;
  border-color: #2497F3;
  outline:none;
  color:#000;
  transform-origin:top left;
  transition: color .3s ease-out, border-color .3s ease-out;
}

label {
  color: #9A9A9A;
}

.container {
  width:100%;
}

header {
  margin: 15px 0 0 15px;
  display:block;
}

.brand{
  float:left;
}

.header-icon {
  font-size:.85em;
}

.nav {
  float:right;
  margin-right: 10px;
}

.nav i {
  margin: 0 5px;
}

.nav button{
  padding-top:4px;
  width: 35px;
  height:35px;
  background:none;
  border-radius:50%;
  -moz-border-radius:50%;
  -webkit-border-radius:50%;
  overflow:hidden;
}

.health-container {
  clear:both;
  padding-top: 75px;
}

.player-container {
  text-align:center;
  max-width:150px;
  max-height: 310px;
  margin: 0 auto;
}

.player-container button {
  width: 125px;
  height: 75px;
  background: #689F38;
  color:#fff;
  font-size:3em; 
}

.player-container button span {
  padding:20px;
  margin-top:-5px;
}

.circle{
  display:block;
  position:absolute;
  background:rgba(0,0,0,.10);
  border-radius:50%;
  transform:scale(0);
}

.circle.animate{
  animation:effect 0.5s ease-in;
}

.text-color {
  color: #689F38;
}

.health-text{
  margin:20px 0;
  font-size: 4em;
  font-weight:300;
}

.modal-dialog{
  position:absolute;
  top:0;
  bottom:0;
  right: 0;
  left:0;
  margin:20px;
  z-index:99999;
  opacity:0;
  -webkit-transition: opacity .2s ease-out;
  -moz-transition: opacity .2s ease-out;
  transition:opacity .2s ease-out;
  pointer-events: none;
}

.modal-dialog:target {
  opacity:1;
  pointer-events:auto;
}

.modal-dialog > div {
  max-width:400px;
  height: 350px;
  position:relative;
  margin: 10% auto;
  background:#fff;
  padding: 20px 12px 0 20px;
  -webkit-box-shadow: 0px 15px 40px 3px rgba(0,0,0,0.3);
  -moz-box-shadow: 0px 15px 40px 3px rgba(0,0,0,0.3);
  box-shadow: 0px 15px 40px 3px rgba(0,0,0,0.3);
}

.modal-button {
  background:none;
  color: #2497F3;
  font-family: 'Roboto', Arial, serif;
  font-size: 15px;
  text-transform:uppercase;
  font-weight:500;
  padding: 10px 20px;
}

.modal-button:hover{
  background:#F2F2F2;
}

.modal-body {
  padding: 20px 0;
  height:100%;
}

.modal-footer{
  margin-top: -75px;
  text-align: right;
}

</style>
